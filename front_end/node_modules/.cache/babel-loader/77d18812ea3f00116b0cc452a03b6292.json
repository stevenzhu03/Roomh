{"ast":null,"code":"import history from \"../history\"; // Sign Up\n\nexport const createUser = formValues => dispatch => {\n  fetch(\"http://localhost:3000/signup\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    },\n    body: JSON.stringify({\n      username: formValues.username,\n      password: formValues.password,\n      email: formValues.email\n    })\n  }).then(resp => resp.json()).then(response => {\n    if (response.errors) {\n      alert(response.errors);\n    } else {\n      dispatch({\n        type: \"SET_CURRENT_USER\",\n        payload: response.user\n      });\n      localStorage.token = response.token;\n      history.push(\"/find_roommate\");\n    }\n  });\n}; //Log In\n\nexport const login = formValues => dispatch => {\n  fetch(\"http://localhost:3000/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    },\n    body: JSON.stringify({\n      username: formValues.username,\n      password: formValues.password\n    })\n  }).then(resp => resp.json()).then(response => {\n    if (response.errors) {\n      alert(response.errors);\n    } else {\n      console.log(response.user);\n      dispatch({\n        type: \"SET_CURRENT_USER\",\n        payload: response.user\n      });\n      localStorage.token = response.token;\n      history.push(\"/find_roommate\");\n    }\n  });\n}; //Auto Login\n\nexport const autoLogin = token => dispatch => {\n  fetch(\"http://localhost:3000/auto_login\", {\n    headers: {\n      Authorization: token\n    }\n  }).then(resp => resp.json()).then(response => {\n    if (response.errors) {\n      alert(response.errors);\n      history.push(\"/\");\n    } else {\n      dispatch({\n        type: \"AUTO_LOGIN\",\n        payload: response\n      });\n    }\n  });\n}; // Log Out\n\nexport const logOut = () => dispatch => {\n  dispatch({\n    type: \"LOG_OUT\",\n    payload: null\n  });\n  localStorage.removeItem(\"token\");\n  history.push(`/login`);\n}; //Fetch All Users\n\nexport const fetchUsers = () => dispatch => {\n  fetch(\"http://localhost:3000/users\").then(resp => resp.json()).then(users => {\n    // returns an array of all users\n    dispatch({\n      type: \"FETCH_USERS\",\n      payload: users\n    });\n  });\n}; //Set a Selected User\n\nexport const setSelectedUser = selectedUser => dispatch => {\n  dispatch({\n    type: \"SET_SELECTED_USER\",\n    payload: selectedUser\n  });\n  history.push(`/matcher_profile`);\n}; //Create a Match\n\nexport const createMatch = (user_id, matcher_id) => dispatch => {\n  fetch(\"http://localhost:3000/match/create\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    },\n    body: JSON.stringify({\n      user_id: user_id,\n      matcher_id: matcher_id\n    })\n  }).then(resp => resp.json()).then(response => dispatch({\n    type: \"ADD_PENDING_MATCH\",\n    payload: response\n  }));\n}; //Confirm a Match\n\nexport const confirmMatch = (user_id, matcher_id) => dispatch => {\n  fetch(\"http://localhost:3000/match/confirm\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    },\n    body: JSON.stringify({\n      user_id: user_id,\n      matcher_id: matcher_id\n    })\n  }).then(resp => re);\n};","map":{"version":3,"sources":["/Users/stevenzhu/Development/code/Flatiron School Final Projects/Roomh/front_end/src/actions/index.js"],"names":["history","createUser","formValues","dispatch","fetch","method","headers","Accept","body","JSON","stringify","username","password","email","then","resp","json","response","errors","alert","type","payload","user","localStorage","token","push","login","console","log","autoLogin","Authorization","logOut","removeItem","fetchUsers","users","setSelectedUser","selectedUser","createMatch","user_id","matcher_id","confirmMatch","re"],"mappings":"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","sourcesContent":["import history from \"../history\";\n\n// Sign Up\n\nexport const createUser = (formValues) => (dispatch) => {\n  fetch(\"http://localhost:3000/signup\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify({\n      username: formValues.username,\n      password: formValues.password,\n      email: formValues.email,\n    }),\n  })\n    .then((resp) => resp.json())\n    .then((response) => {\n      if (response.errors) {\n        alert(response.errors);\n      } else {\n        dispatch({ type: \"SET_CURRENT_USER\", payload: response.user });\n        localStorage.token = response.token;\n        history.push(\"/find_roommate\");\n      }\n    });\n};\n\n//Log In\n\nexport const login = (formValues) => (dispatch) => {\n  fetch(\"http://localhost:3000/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify({\n      username: formValues.username,\n      password: formValues.password,\n    }),\n  })\n    .then((resp) => resp.json())\n    .then((response) => {\n      if (response.errors) {\n        alert(response.errors);\n      } else {\n        console.log(response.user)\n        dispatch({ type: \"SET_CURRENT_USER\", payload: response.user });\n        localStorage.token = response.token;\n        history.push(\"/find_roommate\");\n      }\n    });\n};\n\n//Auto Login\n\nexport const autoLogin = (token) => (dispatch) => {\n  fetch(\"http://localhost:3000/auto_login\", {\n    headers: {\n      Authorization: token,\n    },\n  })\n    .then((resp) => resp.json())\n    .then((response) => {\n      if (response.errors) {\n        alert(response.errors);\n        history.push(\"/\");\n      } else {\n        dispatch({ type: \"AUTO_LOGIN\", payload: response });\n      }\n    });\n};\n\n// Log Out\n\nexport const logOut = () => (dispatch) => {\n  dispatch({ type: \"LOG_OUT\", payload: null });\n  localStorage.removeItem(\"token\");\n  history.push(`/login`);\n};\n\n//Fetch All Users\n\nexport const fetchUsers = () => (dispatch) => {\n  fetch(\"http://localhost:3000/users\")\n    .then((resp) => resp.json())\n    .then((users) => {\n      // returns an array of all users\n      dispatch({ type: \"FETCH_USERS\", payload: users });\n    });\n};\n\n//Set a Selected User\n\nexport const setSelectedUser = (selectedUser) => (dispatch) => {\n  dispatch({ type: \"SET_SELECTED_USER\", payload: selectedUser });\n  history.push(`/matcher_profile`);\n};\n\n//Create a Match\nexport const createMatch = (user_id, matcher_id) => (dispatch) => {\n  fetch(\"http://localhost:3000/match/create\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify({\n      user_id: user_id,\n      matcher_id: matcher_id,\n    }),\n  })\n    .then((resp) => resp.json())\n    .then((response) => dispatch({ type: \"ADD_PENDING_MATCH\", payload: response}));\n};\n\n//Confirm a Match\nexport const confirmMatch = (user_id, matcher_id) => (dispatch) => {\n  fetch(\"http://localhost:3000/match/confirm\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify({\n      user_id: user_id,\n      matcher_id: matcher_id,\n    }),\n  })\n  .then(resp => re)\n}"]},"metadata":{},"sourceType":"module"}