{"ast":null,"code":"var _jsxFileName = \"/Users/stevenzhu/Development/code/Flatiron School Final Projects/Roomh/front_end/src/components/SignUp.js\";\nimport React from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createUser } from '../actions';\n\nclass SignUp extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderError = meta => {\n      if (meta.touched && meta.error) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10,\n            columnNumber: 14\n          }\n        }, meta.error);\n      }\n    };\n\n    this.renderInput = formProps => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"field\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 7\n        }\n      }, formProps.icon, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, formProps.input, {\n        placeholder: formProps.label,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 9\n        }\n      })), this.renderError(formProps.meta));\n    };\n\n    this.onSubmit = formValues => {\n      if (formValues.password === formValues.passwordConfirmation) {\n        this.props.createUser(formValues);\n        this.props.history.push(`/`);\n      } else {\n        alert(\"Passwords don't match\");\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signup-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signup-form-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 15\n      }\n    }, \"Sign Up\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }\n    }, \"Find the perfect roommate\"), /*#__PURE__*/React.createElement(\"form\", {\n      className: \"signup-form\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"username\",\n      type: \"\",\n      component: this.renderInput,\n      label: \"Username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"email\",\n      component: this.renderInput,\n      label: \"Email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"password\",\n      component: this.renderInput,\n      label: \"Password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"passwordConfirmation\",\n      component: this.renderInput,\n      label: \"Password Confirmation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"signup-btn\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 19\n      }\n    }, \"Sign Up\"))));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.username) {\n    errors.username = \"You must enter a username\";\n  }\n\n  if (!formValues.email) {\n    errors.email = \"You must enter a email\";\n  }\n\n  if (!formValues.password) {\n    errors.password = \"You must enter a password\";\n  }\n\n  if (!formValues.passwordConfirmation) {\n    errors.passwordConfirmation = \"You must confirm password\";\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: \"signUp\",\n  validate\n})(SignUp);\nexport default connect(null, {\n  createUser\n})(formWrapped); // state = { \n//   username: \"\",\n//   password: \"\",\n//   age: null,\n//   passwordConfirmation: \"\"\n// }\n// handleChange = (event) => {\n//   this.setState({\n//     [event.target.name]: event.target.value\n//   })\n// }\n// handleSubmit = (e) => {\n//   e.preventDefault()\n//   if (this.state.password === this.state.passwordConfirmation){\n//     fetch('http://localhost:3000/signup', {\n//       method: 'POST',\n//       headers: { \n//         'Content-Type': 'application/json',\n//         'Accept': 'application/json'\n//       },\n//       body: JSON.stringify({\n//         username: this.state.username,\n//         password: this.state.password,\n//         age: parseInt(this.state.age)\n//       })\n//     })\n// .then(resp => resp.json())\n//     .then(response => {\n//       if (response.errors) {\n//         alert(response.errors)\n//       } else {\n//         this.props.setUser(response)\n//       }\n//     }\n//     )\n//   } else {\n//     alert(\"Passwords don't match\")\n//   }\n// }","map":{"version":3,"sources":["/Users/stevenzhu/Development/code/Flatiron School Final Projects/Roomh/front_end/src/components/SignUp.js"],"names":["React","reduxForm","Field","connect","createUser","SignUp","Component","renderError","meta","touched","error","renderInput","formProps","icon","input","label","onSubmit","formValues","password","passwordConfirmation","props","history","push","alert","render","handleSubmit","validate","errors","username","email","formWrapped","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { reduxForm, Field } from 'redux-form'\nimport { connect } from 'react-redux'\nimport { createUser } from '../actions'\n\nclass SignUp extends React.Component {\n\n  renderError = meta => {\n    if (meta.touched && meta.error) {\n      return <div>{meta.error}</div>\n    }\n  }\n\n  renderInput = formProps => {\n    return (\n      <div className=\"field\">\n        {formProps.icon}\n        <input {...formProps.input} placeholder={formProps.label} />\n        {this.renderError(formProps.meta)}\n      </div>\n    )\n  }\n\n  onSubmit = formValues => {\n    if(formValues.password === formValues.passwordConfirmation) {\n      this.props.createUser(formValues)\n      this.props.history.push(`/`)\n    } else {\n          alert(\"Passwords don't match\")\n    }\n  }\n\n  render() {\n    return (\n          <div className=\"signup-page\">\n            <div className=\"signup-form-container\">\n              <h1>Sign Up</h1>\n              <p>Find the perfect roommate</p>\n                <form className=\"signup-form\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\n                  <Field name=\"username\" type=\"\" component={this.renderInput} label=\"Username\"/>\n                  <Field name=\"email\" component={this.renderInput} label=\"Email\" />\n                  <Field name=\"password\" component={this.renderInput} label=\"Password\" />\n                  <Field name=\"passwordConfirmation\" component={this.renderInput} label=\"Password Confirmation\" />\n                  <button className=\"signup-btn\" type=\"submit\" >Sign Up</button>\n                </form>\n            </div>\n          </div>\n    )\n  }\n  \n}\n\nconst validate = formValues => {\n  const errors = {}\n\n  if(!formValues.username) {\n    errors.username = \"You must enter a username\"\n  }\n  if(!formValues.email) {\n    errors.email = \"You must enter a email\"\n  }\n  if(!formValues.password) {\n    errors.password = \"You must enter a password\"\n  }\n  if(!formValues.passwordConfirmation) {\n    errors.passwordConfirmation = \"You must confirm password\"\n  }\n\n  return errors\n}\n\nconst formWrapped = reduxForm({\n  form: \"signUp\",\n  validate\n})(SignUp);\n\nexport default connect(null, { createUser } )(formWrapped)\n\n\n\n\n          // state = { \n          //   username: \"\",\n          //   password: \"\",\n          //   age: null,\n          //   passwordConfirmation: \"\"\n          // }\n        \n          // handleChange = (event) => {\n          //   this.setState({\n          //     [event.target.name]: event.target.value\n          //   })\n          // }\n        \n          // handleSubmit = (e) => {\n          //   e.preventDefault()\n          //   if (this.state.password === this.state.passwordConfirmation){\n          //     fetch('http://localhost:3000/signup', {\n          //       method: 'POST',\n          //       headers: { \n          //         'Content-Type': 'application/json',\n          //         'Accept': 'application/json'\n          //       },\n          //       body: JSON.stringify({\n          //         username: this.state.username,\n          //         password: this.state.password,\n          //         age: parseInt(this.state.age)\n          //       })\n          //     })\n              // .then(resp => resp.json())\n          //     .then(response => {\n          //       if (response.errors) {\n          //         alert(response.errors)\n          //       } else {\n          //         this.props.setUser(response)\n          //       }\n          //     }\n          //     )\n          //   } else {\n          //     alert(\"Passwords don't match\")\n          //   }\n          // }"]},"metadata":{},"sourceType":"module"}