{"ast":null,"code":"var _jsxFileName = \"/Users/stevenzhu/Development/code/Flatiron School Final Projects/Roomh/front_end/src/components/ImageUploader.js\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport DropzoneComponent from 'react-dropzone-component';\nimport 'react-dropzone-component/styles/filepicker.css';\nimport 'dropzone/dist/min/dropzone.min';\nconst djsConfig = {\n  acceptedFiles: \"image/jpeg,image/png,image/gif\",\n  autoProcessQueue: false,\n  uploadMultiple: false,\n  addRemoveLinks: true\n};\nconst componentConfig = {\n  iconFiletypes: ['.jpg', '.png', '.gif'],\n  showFiletypeIcon: true,\n  maxFiles: 1,\n  postUrl: 'no-url'\n};\nexport default class ImageUploader extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    this.showPreview = image => {\n      if (image == null) return;\n      let mockFile = {\n        name: image.name,\n        size: image.byte_size,\n        dataURL: image.url\n      };\n      this.myDropzone.files.push(mockFile);\n      this.myDropzone.emit(\"addedfile\", mockFile);\n      this.myDropzone.createThumbnailFromUrl(mockFile, this.myDropzone.options.thumbnailWidth, this.myDropzone.options.thumbnailHeight, this.myDropzone.options.thumbnailMethod, true, thumbnail => {\n        this.myDropzone.emit('thumbnail', mockFile, thumbnail);\n        this.myDropzone.emit(\"complete\", mockFile);\n      });\n    };\n\n    this.removePrevAndAddNew = image => {\n      if (this.myDropzone.files.length > 1) {\n        let prevImage = this.myDropzone.files[0];\n        this.myDropzone.emit('removedfile', prevImage);\n      }\n\n      this.props.selectImage(image);\n    };\n  }\n\n  render() {\n    const {\n      image\n    } = this.props;\n    const eventHandlers = {\n      init: dropzone => {\n        this.myDropzone = dropzone;\n        this.showPreview(image);\n      },\n      addedfile: image => this.removePrevAndAddNew(image),\n      removedfile: () => this.props.unselectImage()\n    };\n    return /*#__PURE__*/React.createElement(DropzoneComponent, {\n      config: componentConfig,\n      eventHandlers: eventHandlers,\n      djsConfig: djsConfig,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/stevenzhu/Development/code/Flatiron School Final Projects/Roomh/front_end/src/components/ImageUploader.js"],"names":["React","PureComponent","PropTypes","DropzoneComponent","djsConfig","acceptedFiles","autoProcessQueue","uploadMultiple","addRemoveLinks","componentConfig","iconFiletypes","showFiletypeIcon","maxFiles","postUrl","ImageUploader","showPreview","image","mockFile","name","size","byte_size","dataURL","url","myDropzone","files","push","emit","createThumbnailFromUrl","options","thumbnailWidth","thumbnailHeight","thumbnailMethod","thumbnail","removePrevAndAddNew","length","prevImage","props","selectImage","render","eventHandlers","init","dropzone","addedfile","removedfile","unselectImage"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AACA,OAAO,gDAAP;AACA,OAAO,gCAAP;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,aAAa,EAAE,gCADD;AAEdC,EAAAA,gBAAgB,EAAE,KAFJ;AAGdC,EAAAA,cAAc,EAAE,KAHF;AAIdC,EAAAA,cAAc,EAAE;AAJF,CAAlB;AAOA,MAAMC,eAAe,GAAG;AACpBC,EAAAA,aAAa,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CADK;AAEpBC,EAAAA,gBAAgB,EAAE,IAFE;AAGpBC,EAAAA,QAAQ,EAAE,CAHU;AAIpBC,EAAAA,OAAO,EAAE;AAJW,CAAxB;AAOA,eAAe,MAAMC,aAAN,SAA4Bb,aAA5B,CAA0C;AAAA;AAAA;;AAAA,SACrDc,WADqD,GACvCC,KAAK,IAAI;AACnB,UAAIA,KAAK,IAAI,IAAb,EAAmB;AAEnB,UAAIC,QAAQ,GAAG;AACXC,QAAAA,IAAI,EAAEF,KAAK,CAACE,IADD;AAEXC,QAAAA,IAAI,EAAEH,KAAK,CAACI,SAFD;AAGXC,QAAAA,OAAO,EAAEL,KAAK,CAACM;AAHJ,OAAf;AAMA,WAAKC,UAAL,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BR,QAA3B;AACA,WAAKM,UAAL,CAAgBG,IAAhB,CAAqB,WAArB,EAAkCT,QAAlC;AACA,WAAKM,UAAL,CAAgBI,sBAAhB,CACIV,QADJ,EAEI,KAAKM,UAAL,CAAgBK,OAAhB,CAAwBC,cAF5B,EAGI,KAAKN,UAAL,CAAgBK,OAAhB,CAAwBE,eAH5B,EAII,KAAKP,UAAL,CAAgBK,OAAhB,CAAwBG,eAJ5B,EAKI,IALJ,EAMIC,SAAS,IAAI;AACT,aAAKT,UAAL,CAAgBG,IAAhB,CAAqB,WAArB,EAAkCT,QAAlC,EAA4Ce,SAA5C;AACA,aAAKT,UAAL,CAAgBG,IAAhB,CAAqB,UAArB,EAAiCT,QAAjC;AACH,OATL;AAWH,KAvBoD;;AAAA,SAyBrDgB,mBAzBqD,GAyB/BjB,KAAK,IAAI;AAC3B,UAAI,KAAKO,UAAL,CAAgBC,KAAhB,CAAsBU,MAAtB,GAA+B,CAAnC,EAAsC;AAClC,YAAIC,SAAS,GAAG,KAAKZ,UAAL,CAAgBC,KAAhB,CAAsB,CAAtB,CAAhB;AACA,aAAKD,UAAL,CAAgBG,IAAhB,CAAqB,aAArB,EAAoCS,SAApC;AACH;;AAED,WAAKC,KAAL,CAAWC,WAAX,CAAuBrB,KAAvB;AACH,KAhCoD;AAAA;;AAkCrDsB,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEtB,MAAAA;AAAF,QAAY,KAAKoB,KAAvB;AACA,UAAMG,aAAa,GAAG;AAClBC,MAAAA,IAAI,EAAEC,QAAQ,IAAI;AACd,aAAKlB,UAAL,GAAkBkB,QAAlB;AACA,aAAK1B,WAAL,CAAiBC,KAAjB;AACH,OAJiB;AAKlB0B,MAAAA,SAAS,EAAE1B,KAAK,IAAI,KAAKiB,mBAAL,CAAyBjB,KAAzB,CALF;AAMlB2B,MAAAA,WAAW,EAAE,MAAM,KAAKP,KAAL,CAAWQ,aAAX;AAND,KAAtB;AASA,wBACI,oBAAC,iBAAD;AACI,MAAA,MAAM,EAAEnC,eADZ;AAEI,MAAA,aAAa,EAAE8B,aAFnB;AAGI,MAAA,SAAS,EAAEnC,SAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAOH;;AApDoD","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport DropzoneComponent from 'react-dropzone-component';\nimport 'react-dropzone-component/styles/filepicker.css';\nimport 'dropzone/dist/min/dropzone.min';\n\nconst djsConfig = {\n    acceptedFiles: \"image/jpeg,image/png,image/gif\",\n    autoProcessQueue: false,\n    uploadMultiple: false,\n    addRemoveLinks: true\n}\n\nconst componentConfig = {\n    iconFiletypes: ['.jpg', '.png', '.gif'],\n    showFiletypeIcon: true,\n    maxFiles: 1,\n    postUrl: 'no-url'\n}\n\nexport default class ImageUploader extends PureComponent {\n    showPreview = image => {\n        if (image == null) return;\n\n        let mockFile = {\n            name: image.name,\n            size: image.byte_size,\n            dataURL: image.url,\n        };\n\n        this.myDropzone.files.push(mockFile);\n        this.myDropzone.emit(\"addedfile\", mockFile);\n        this.myDropzone.createThumbnailFromUrl(\n            mockFile,\n            this.myDropzone.options.thumbnailWidth,\n            this.myDropzone.options.thumbnailHeight,\n            this.myDropzone.options.thumbnailMethod,\n            true,\n            thumbnail => {\n                this.myDropzone.emit('thumbnail', mockFile, thumbnail);\n                this.myDropzone.emit(\"complete\", mockFile);\n            }\n        );\n    }\n\n    removePrevAndAddNew = image => {\n        if (this.myDropzone.files.length > 1) {\n            let prevImage = this.myDropzone.files[0];\n            this.myDropzone.emit('removedfile', prevImage);\n        }\n\n        this.props.selectImage(image);\n    }\n\n    render() {\n        const { image } = this.props;\n        const eventHandlers = {\n            init: dropzone => {\n                this.myDropzone = dropzone;\n                this.showPreview(image);\n            },\n            addedfile: image => this.removePrevAndAddNew(image),\n            removedfile: () => this.props.unselectImage()\n        }\n\n        return (\n            <DropzoneComponent\n                config={componentConfig}\n                eventHandlers={eventHandlers}\n                djsConfig={djsConfig}\n            />\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}