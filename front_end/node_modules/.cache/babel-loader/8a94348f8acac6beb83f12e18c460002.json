{"ast":null,"code":"import history from '../history';\nexport const fetchUsers = currentUser => dispatch => {\n  fetch('http://localhost:3000/users').then(resp => resp.json()).then(users => {\n    // returns an array of all users\n    let filteredUsers = users.filter(user => user);\n    dispatch({\n      type: \"FETCH_USERS\",\n      payload: users\n    });\n  });\n};\nexport const createUser = formValues => dispatch => {\n  fetch('http://localhost:3000/signup', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      username: formValues.username,\n      password: formValues.password,\n      email: formValues.email\n    })\n  }).then(resp => resp.json()).then(response => {\n    if (response.errors) {\n      alert(response.errors);\n    } else {\n      dispatch({\n        type: \"SET_CURRENT_USER\",\n        payload: response\n      });\n      localStorage.token = response.token;\n      history.push('/findroomate');\n    }\n  });\n};\nexport const login = formValues => dispatch => {\n  fetch('http://localhost:3000/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      username: formValues.username,\n      password: formValues.password\n    })\n  }).then(resp => resp.json()).then(response => {\n    if (response.errors) {\n      alert(response.errors);\n    } else {\n      dispatch({\n        type: \"SET_CURRENT_USER\",\n        payload: response\n      });\n      localStorage.token = response.token;\n      history.push('/findroomate');\n    }\n  });\n};\nexport const autoLogin = token => dispatch => {\n  fetch(\"http://localhost:3000/auto_login\", {\n    headers: {\n      \"Authorization\": token\n    }\n  }).then(resp => resp.json()).then(response => {\n    if (response.errors) {\n      alert(response.errors);\n      history.push('/');\n    } else {\n      dispatch({\n        type: \"AUTO_LOGIN\",\n        payload: response\n      });\n      history.push('/findroomate');\n    }\n  });\n};\nexport const logOut = () => dispatch => {\n  dispatch({\n    type: \"LOG_OUT\",\n    payload: null\n  });\n  localStorage.removeItem(\"token\");\n  history.push(`/login`);\n};","map":{"version":3,"sources":["/Users/stevenzhu/Development/code/Flatiron School Final Projects/Roomh/front_end/src/actions/index.js"],"names":["history","fetchUsers","currentUser","dispatch","fetch","then","resp","json","users","filteredUsers","filter","user","type","payload","createUser","formValues","method","headers","body","JSON","stringify","username","password","email","response","errors","alert","localStorage","token","push","login","autoLogin","logOut","removeItem"],"mappings":"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","sourcesContent":["import history from '../history'\n\nexport const fetchUsers = currentUser => dispatch => {\n    fetch('http://localhost:3000/users')\n    .then(resp => resp.json())\n    .then(users => {\n        // returns an array of all users\n        let filteredUsers = users.filter(user => user) \n        dispatch({type: \"FETCH_USERS\", payload: users})\n    })\n}\n\nexport const createUser = (formValues) => dispatch => {\n    fetch('http://localhost:3000/signup', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          username: formValues.username,\n          password: formValues.password,\n          email: formValues.email\n        })\n    })\n    .then(resp => resp.json())\n    .then(response => {\n        if (response.errors) {\n            alert(response.errors)\n        } else {\n            dispatch({type: \"SET_CURRENT_USER\", payload: response})\n            localStorage.token = response.token\n            history.push('/findroomate')\n        }\n    })\n    \n} \n\nexport const login = (formValues) => dispatch => {\n    fetch('http://localhost:3000/login', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          username: formValues.username,\n          password: formValues.password,\n        })\n        })\n        .then(resp => resp.json())\n        .then(response => {\n            if (response.errors){\n              alert(response.errors)\n            } else {\n              dispatch({type: \"SET_CURRENT_USER\", payload: response})\n              localStorage.token = response.token\n              history.push('/findroomate')\n            }\n        })\n}\n\nexport const autoLogin = (token) => dispatch => {\n    fetch(\"http://localhost:3000/auto_login\", {\n        headers: {\n          \"Authorization\": token\n        }\n      })\n      .then(resp => resp.json())\n      .then(response => {\n        if (response.errors){\n          alert(response.errors)\n          history.push('/')\n        } else {\n            dispatch({type: \"AUTO_LOGIN\", payload: response})\n            history.push('/findroomate')\n        }\n      })\n}\n\n              \nexport const logOut = () => dispatch => {\n    dispatch({type: \"LOG_OUT\", payload: null})\n    localStorage.removeItem(\"token\")\n    history.push(`/login`)\n}"]},"metadata":{},"sourceType":"module"}