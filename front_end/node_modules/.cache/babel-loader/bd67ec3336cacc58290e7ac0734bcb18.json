{"ast":null,"code":"import history from '../history'; // Sign Up\n\nexport const createUser = formValues => dispatch => {\n  fetch('http://localhost:3000/signup', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      username: formValues.username,\n      password: formValues.password,\n      email: formValues.email\n    })\n  }).then(resp => resp.json()).then(response => {\n    if (response.errors) {\n      alert(response.errors);\n    } else {\n      dispatch({\n        type: \"SET_CURRENT_USER\",\n        payload: response\n      });\n      localStorage.token = response.token;\n      history.push('/findroomate');\n    }\n  });\n}; //Log In\n\nexport const login = formValues => dispatch => {\n  fetch('http://localhost:3000/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      username: formValues.username,\n      password: formValues.password\n    })\n  }).then(resp => resp.json()).then(response => {\n    if (response.errors) {\n      alert(response.errors);\n    } else {\n      dispatch({\n        type: \"SET_CURRENT_USER\",\n        payload: response.user\n      });\n      localStorage.token = response.token;\n      history.push('/find_roommate');\n    }\n  });\n}; //Auto Login\n\nexport const autoLogin = token => dispatch => {\n  fetch(\"http://localhost:3000/auto_login\", {\n    headers: {\n      \"Authorization\": token\n    }\n  }).then(resp => resp.json()).then(response => {\n    if (response.errors) {\n      alert(response.errors);\n      history.push('/');\n    } else {\n      dispatch({\n        type: \"AUTO_LOGIN\",\n        payload: response\n      });\n    }\n  });\n}; // Log Out\n\nexport const logOut = () => dispatch => {\n  dispatch({\n    type: \"LOG_OUT\",\n    payload: null\n  });\n  localStorage.removeItem(\"token\");\n  history.push(`/login`);\n}; //Fetch All Users\n\nexport const fetchUsers = () => dispatch => {\n  fetch('http://localhost:3000/users').then(resp => resp.json()).then(users => {\n    // returns an array of all users\n    // console.log(currentUser.id)\n    // console.log(filteredUsers) \n    dispatch({\n      type: \"FETCH_USERS\",\n      payload: filteredUsers\n    });\n  });\n}; //Set a Selected User\n\nexport const setSelectedUser = selectedUser => dispatch => {\n  dispatch({\n    type: \"SET_SELECTED_USER\",\n    payload: selectedUser\n  });\n  history.push(`/matcher_profile`);\n}; //Create a Match\n\nexport const createMatch = (user_id, matcher_id) => dispatch => {\n  fetch('http://localhost:3000/match/create', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      user_id: user_id,\n      matcher_id: matcher_id\n    })\n  }).then(resp => resp.json()).then(response => console.log(response));\n};","map":{"version":3,"sources":["/Users/stevenzhu/Development/code/Flatiron School Final Projects/Roomh/front_end/src/actions/index.js"],"names":["history","createUser","formValues","dispatch","fetch","method","headers","body","JSON","stringify","username","password","email","then","resp","json","response","errors","alert","type","payload","localStorage","token","push","login","user","autoLogin","logOut","removeItem","fetchUsers","users","filteredUsers","setSelectedUser","selectedUser","createMatch","user_id","matcher_id","console","log"],"mappings":"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","sourcesContent":["import history from '../history'\n\n\n// Sign Up\n\nexport const createUser = (formValues) => dispatch => {\n  fetch('http://localhost:3000/signup', {\n  method: 'POST',\n  headers: { \n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  body: JSON.stringify({\n        username: formValues.username,\n        password: formValues.password,\n        email: formValues.email\n      })\n  })\n  .then(resp => resp.json())\n  .then(response => {\n    if (response.errors) {\n      alert(response.errors)\n    } else {\n      dispatch({type: \"SET_CURRENT_USER\", payload: response})\n        localStorage.token = response.token\n        history.push('/findroomate')\n    }\n  })\n    \n} \n\n//Log In\n\nexport const login = (formValues) => dispatch => {\n  fetch('http://localhost:3000/login', {\n    method: 'POST',\n    headers: { \n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      username: formValues.username,\n      password: formValues.password,\n    })\n  })\n  .then(resp => resp.json())\n  .then(response => {\n      if (response.errors){\n        alert(response.errors)\n      } else {\n        dispatch({type: \"SET_CURRENT_USER\", payload: response.user})\n        localStorage.token = response.token\n        history.push('/find_roommate')\n      }\n  })\n}\n\n//Auto Login\n\nexport const autoLogin = (token) => dispatch => {\n    fetch(\"http://localhost:3000/auto_login\", {\n      headers: {\n        \"Authorization\": token\n        }\n      })\n      .then(resp => resp.json())\n      .then(response => {\n        if (response.errors){\n          alert(response.errors)\n          history.push('/')\n        } else {\n          dispatch({type: \"AUTO_LOGIN\", payload: response})\n        }\n    })\n}\n    \n// Log Out\n\nexport const logOut = () => dispatch => {\n  dispatch({type: \"LOG_OUT\", payload: null})\n  localStorage.removeItem(\"token\")\n  history.push(`/login`)\n}\n\n//Fetch All Users\n\nexport const fetchUsers = () => dispatch => {\n    fetch('http://localhost:3000/users')\n    .then(resp => resp.json())\n    .then(users => {\n        // returns an array of all users\n        // console.log(currentUser.id)\n        // console.log(filteredUsers) \n        dispatch({type: \"FETCH_USERS\", payload: filteredUsers})\n    })\n}\n\n//Set a Selected User\n\nexport const setSelectedUser = selectedUser => dispatch => {\n  dispatch({type: \"SET_SELECTED_USER\", payload: selectedUser}) \n  history.push(`/matcher_profile`)\n}\n\n//Create a Match\nexport const createMatch = (user_id, matcher_id) => dispatch => {\n  fetch('http://localhost:3000/match/create', {\n    method: 'POST',\n    headers: { \n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      user_id: user_id,\n      matcher_id: matcher_id\n    })\n  })\n  .then(resp => resp.json())\n  .then(response => console.log(response))\n}"]},"metadata":{},"sourceType":"module"}